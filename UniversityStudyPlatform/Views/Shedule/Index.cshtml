@model List<List<Shedule>>
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<link rel="stylesheet" href="~/css/shedule.css" asp-append-version="true" />
</head>
<body>
<div class="wrapper">
    @foreach (var sheduleDay in Model)
    {
        
            <a class="shedule_anchor">
                <div class="shedule_block">
                <div class="block_inner_content">
                    @foreach (var shedule in sheduleDay)
                    {
                    <div class="shedule_name">
                        <p>@shedule.Faculty</p>
                    </div>
                    <table>
                        <tr>
                            <td>@shedule.Id</td>
                        </tr>
                    </table>
                    }
                </div>
            </div>
        </a>
			<section class="container vert-offset-top-2">
				<div id="todoBox" class="todoBox col-xs-6 col-xs-offset-3"></div>
			</section>
    }
</div>
</body>
</html>
<script>
var TodoBox = React.createClass({
	getInitialState: function () {
		return {
			data: [
				{"id":"00001","task":"Biye Bari","complete":"false"},
				{"id":"00002","task":"First Job","complete":"false"},
		{"id":"00003","task":"Cook Book","complete":"false"}
			]
		};
	},
	generateId: function () {
		return Math.floor(Math.random()*90000) + 10000;
	},
	handleNodeRemoval: function (nodeId) {
		var data = this.state.data;
		data = data.filter(function (el) {
			return el.id !== nodeId;
		});
		this.setState({data});
		return;
	},
	handleSubmit: function (task) {
		var data = this.state.data;
		var id = this.generateId().toString();
		var complete = 'false';
		data = data.concat([{id, task, complete}]);
		this.setState({data});
	},
	handleToggleComplete: function (nodeId) {
		var data = this.state.data;
		for (var i in data) {
			if (data[i].id == nodeId) {
				data[i].complete = data[i].complete === 'true' ? 'false' : 'true';
				break;
			}
		}
		this.setState({data});
		return;
	},
	render: function() {
		return (
<div className="well">
	<h3 className="vert-offset-top-0">My To Do List</h3>
	<TodoList data={this.state.data} removeNode={this.handleNodeRemoval} toggleComplete={this.handleToggleComplete} />
	<TodoForm onTaskSubmit={this.handleSubmit} />
</div>
		);
	}
});

var TodoList = React.createClass({
	removeNode: function (nodeId) {
		this.props.removeNode(nodeId);
		return;
	},
	toggleComplete: function (nodeId) {
		this.props.toggleComplete(nodeId);
		return;
	},
	render: function() {
		var listNodes = this.props.data.map(function (listItem) {
			return (
<TodoItem key={listItem.id} nodeId={listItem.id} task={listItem.task} complete={listItem.complete} removeNode={this.removeNode} toggleComplete={this.toggleComplete} />
			);
		},this);
		return (
<ul className="list-group">
	{listNodes}
</ul>
		);
	}
});

var TodoItem = React.createClass({
	removeNode: function (e) {
		e.preventDefault();
		this.props.removeNode(this.props.nodeId);
		return;
	},
	toggleComplete: function (e) {
		e.preventDefault();
		this.props.toggleComplete(this.props.nodeId);
		return;
	},
	updateClass: function () {

	},
	render: function() {
		var classes = 'list-group-item clearfix';
		if (this.props.complete === 'true') {
			classes = classes + ' list-group-item-success';
		}
		return (
<li className={classes}>
	{this.props.task}
	<div className="pull-right" role="group">
		<button type="button" className="btn btn-xs btn-success img-circle" onClick={this.toggleComplete}>&#x2713;</button> <button type="button" className="btn btn-xs btn-danger img-circle" onClick={this.removeNode}>&#xff38;</button>
	</div>
</li>
		);
	}
});

var TodoForm = React.createClass({
	doSubmit: function (e) {
		e.preventDefault();
		var task = React.findDOMNode(this.refs.task).value.trim();
		if (!task) {
			return;
		}
		this.props.onTaskSubmit(task);
		React.findDOMNode(this.refs.task).value = '';
		return;
	},
	render: function() {
		return (
<div className="commentForm vert-offset-top-2">
	<hr />
	<div className="clearfix">
		<form className="todoForm form-horizontal" onSubmit={this.doSubmit}>
			<div className="form-group">
				<label htmlFor="task" className="col-md-2 control-label">Task</label>
				<div className="col-md-10">
					<input type="text" id="task" ref="task" className="form-control" placeholder="What do you need to do?" />
				</div>
			</div>
			<div className="row">
				<div className="col-md-10 col-md-offset-2 text-right">
					<input type="submit" value="Save Item" className="btn btn-primary" />
				</div>
			</div>
		</form>
	</div>
</div>
		);
	}
});

React.render(
<TodoBox />,
	document.getElementById('todoBox')
);
</script>